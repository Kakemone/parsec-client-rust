// Copyright (c) 2020, Arm Limited, All Rights Reserved
// SPDX-License-Identifier: Apache-2.0
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//          http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//! Error types specific to the Parsec client
use parsec_interface::requests::ResponseStatus;

/// Enum used to denote errors returned to the library user
#[derive(Debug)]
pub enum Error {
    /// Errors originating in the service
    Service(ResponseStatus),
    /// Errors originating in the client
    Client(ClientErrorKind),
}

/// Types of errors local to the client library
#[derive(Debug)]
pub enum ClientErrorKind {
    /// Errors generated by the Parsec interface library
    Interface(ResponseStatus),
    /// Errors generated by interacting with the underlying IPC mechanism
    Ipc(::std::io::Error),
    /// The opcode of the response does not match the opcode of the request
    InvalidServiceResponseType,
}

impl From<ClientErrorKind> for Error {
    fn from(client_error: ClientErrorKind) -> Self {
        Error::Client(client_error)
    }
}

/// Result type used for the internals and interface of the Parsec client
pub type Result<T> = ::std::result::Result<T, Error>;
